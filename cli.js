import { promises as fs } from 'fs'
import cleanup from './clean.js'
import minimist from 'minimist'
import path from 'path'
import pkg from './package.json'
import readPkgUp from 'read-pkg-up'
import updateNotifier from 'update-notifier'
import watch from './watch.js'
;(async function () {
  let {
    _,
    as,
    clean,
    help,
    profile,
    tools,
    watch: shouldWatch,
    verbose,
    version,
    'design-system-import-root': designSystemImportRoot,
  } = minimist(process.argv.slice(2), {
    alias: {
      help: 'h',
    },
    booleans: ['clean', 'help', 'profile', 'tools', 'watch', 'version'],
    string: ['design-system-import-root'],
    default: {
      as: 'react-dom',
      clean: false,
      profile: false,
      tools: false,
      verbose: true,
      version: false,
      watch: false,
    },
  })

  if (!shouldWatch && tools) {
    tools = false
  }

  if (help) {
    console.log(`
  views-morph [directory]
    --as                          target platform
                                    react-dom (default)
                                    react-native
                                    react-pdf
    --clean                       clean the autogenerated .view.js files
    --profile                     wrap every view in Views/Profile.js to enable
                                    React's profiler https://reactjs.org/docs/profiler.html
    --tools                       use with Views Tools, defauls to true when
                                    --watch is enabled, otherwise defaults to false
    --verbose                     defaults to true
    --version                     print the version
    --watch                       watch a directory and produce .view.js files
    --design-system-import-root   alias used for importing design system components
  `)

    process.exit()
  }

  if (version) {
    console.log(`v${pkg.version}`)
    process.exit()
  }

  let input = Array.isArray(_) && _[0]

  if (!input || !(await fs.stat(input)).isDirectory()) {
    console.error(
      `You need to specify an input directory to watch. ${input} is a file.`
    )
    process.exit()
  }

  if (!path.isAbsolute(input)) {
    input = path.normalize(path.join(process.cwd(), input))
  }

  try {
    if ((await fs.stat(path.join(input, 'src'))).isDirectory()) {
      input = path.join(input, 'src')
    }
  } catch (error) {}

  if (clean) {
    console.log(`Cleaning up ${input}...`)
    await cleanup(input, verbose, true)
    process.exit()
  } else {
    await cleanup(input, verbose)
  }

  updateNotifier({ pkg }).notify()

  let appName = 'app'
  try {
    let { packageJson } = readPkgUp({ cwd: input })
    appName = packageJson.name
  } catch (error) {}

  watch({
    appName,
    as,
    once: !shouldWatch,
    profile,
    src: input,
    tools,
    verbose,
    designSystemImportRoot,
  })
})()
